__author__ = 'https://github.com/password123456/'

import os
import sys
import platform
import importlib
import time
import requests
import hashlib
try:
    import magic
except:
    from winmagic import magic

import argparse
import uuid
import pefile

from datetime import datetime
from zipfile import ZipFile
from socket import getaddrinfo, gethostname
from cryptography import x509
from cryptography.hazmat.backends import default_backend
from cryptography.x509.oid import NameOID
from asn1crypto import cms


importlib.reload(sys)

class Bcolors:
    Black = '\033[30m'
    Red = '\033[31m'
    Green = '\033[32m'
    Yellow = '\033[33m'
    Blue = '\033[34m'
    Magenta = '\033[35m'
    Cyan = '\033[36m'
    White = '\033[37m'
    Endc = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

_version_ = '1.0.3-220510'

class Malware_Scann:
    """docstring for Malware_Scann"""
    def __init__(self, directory):
        super(Malware_Scann, self).__init__()

        self.today = datetime.today().strftime('%Y-%m-%d')
        self.ctime = datetime.today().strftime('%Y-%m-%d %H:%M:%S')




        ###Yang harus dirubah
        self.home_path = directory

        self.engine_zipfile = '%s/%s.zip' % (self.home_path, self.today)
        self.engine_extract_file = '%s/engine.db' % self.home_path

        self.scan_result_logs = '%s/output/%s-infected.log' % (self.home_path, self.today)
        self.scan_extension_list= ['.exe', '.dll', '.sys', '.doc', '.docx', '.xls', '.xlsx', '.py', '.xml', '.cfg', '.txt', '.ppt', '.pptx', '.hwp', '.deb', '.gz', '.bz2', '.js', '.bat', '.sh']


    def download_engine(self):
            _url = 'https://bazaar.abuse.ch/export/txt/sha256/full/'
            _header = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_4) AppleWebKit/537.36 (KHTML, like Gecko) '
                                     'Chrome/49.0.2623.112 Safari/537.36', 'Connection': 'keep-alive'}
            try:
                with open(self.engine_zipfile, 'wb') as f:
                    #print('%s Download URL: %s %s' % (Bcolors.Green, url, Bcolors.Endc))

                    r = requests.get(_url, headers=_header, stream=True)
                    download_file_length = r.headers.get('Content-Length')
                    print('%s Downloading: %s / %.2f MB %s'
                          % (Bcolors.Green, self.engine_zipfile, (float(download_file_length) / (1024.0 * 1024.0)), Bcolors.Endc))

                    if download_file_length is None:
                        f.write(r.content)
                    else:
                        dl = 0
                        total_length = int(download_file_length)
                        start = time.perf_counter()
                        for data in r.iter_content(chunk_size=8092):
                            dl += len(data)
                            f.write(data)
                            done = int(100 * dl / total_length)
                            sys.stdout.write('\r [%s%s] %s/%s (%s%%) - %.2f seconds '
                                             % ('>' * done, ' ' * (100 - done), total_length, dl,
                                                done, (time.perf_counter() - start)))
                            sys.stdout.flush()
                f.close()

                self.extract_gzip(self.engine_zipfile, self.home_path)

            except Exception as e:
                print('%s- ::Exception:: Func:[%s] Line:[%s] [%s] %s%s' % (Bcolors.Yellow, self.download_engine.__name__, sys.exc_info()[-1].tb_lineno, type(e).__name__, e, Bcolors.Endc))
            else:
                r.close()


    def extract_gzip(self, engine_zipfile, home_path):
            if engine_zipfile:
                self.engine_zipfile = engine_zipfile
            if home_path:
                self.home_path = home_path


            with ZipFile(self.engine_zipfile, 'r') as zipObj:
                file_list = zipObj.infolist()
                for file in file_list:
                    if file.filename[-1] == '/':
                        continue
                    file.filename = os.path.basename(file.filename)
                    if file.filename.lower() == 'full_sha256.txt'.lower():
                        zipObj.extract(file, self.home_path)
                        _update_file = '%s/%s' % (self.home_path, file.filename)

                        if os.path.isfile(self.engine_extract_file):
                            os.remove(self.engine_extract_file)

                        try:
                            os.rename(_update_file, self.engine_extract_file)
                        except OSError as e:
                            print('%s can not be renamed' % _update_file)
                            print('%s- ::Exception:: Func:[%s] Line:[%s] [%s] %s%s' % (Bcolors.Yellow, self.extract_gzip.__name__, sys.exc_info()[-1].tb_lineno, type(e).__name__, e, Bcolors.Endc))
                            sys.exit(1)

            # Remove Engine zip
            try:
                os.remove(self.engine_zipfile)
            except OSError as e:
                print('%s can not be removed' % self.engine_zipfile)
                print('%s- ::Exception:: Func:[%s] Line:[%s] [%s] %s%s' % (Bcolors.Yellow, self.extract_gzip.__name__, sys.exc_info()[-1].tb_lineno, type(e).__name__, e, Bcolors.Endc))
                sys.exit(1)

            # Check Downloaded File
            if os.path.isfile(self.engine_extract_file):
                f = open(self.engine_extract_file, 'rb')
                file_read = f.read()
                f.close()

                file_hash = hashlib.sha256(file_read).hexdigest()
                file_info = '===> Extracted Size: %.2f MB\n===> Hash(SHA-256) : %s\n' \
                            % (int(os.path.getsize(self.engine_extract_file)) / (1024.0 * 1024.0), file_hash)

                print('\n\n%s===> Update Success: %s %s' % (Bcolors.Green, self.engine_extract_file, Bcolors.Endc))
                print('%s%s%s' % (Bcolors.Green, file_info, Bcolors.Endc))
            else:
                print('%s[-] %s not found. %s' % (Bcolors.Yellow, self.engine_extract_file, Bcolors.Endc))
                sys.exit(1)


    def raw_count(self, filename):
            n = 0
            with open(filename) as f:
                for line in f:
                    if not line.startswith('#'):
                        n = n + 1
            f.close()
            return n


    def get_engine_last_udated_date(self, filename):
            with open(filename) as f:
                for line in f:
                    if 'Last updated' in line:
                        line = line.replace('#', '')
                        line = line.lstrip().strip('\n')
                        line = line.split(' ')
                        line = line[2:5]
                        line = ' '.join(line)
                        #print(line)
                        break
            f.close()
            return line


    def hash_exists_in_db(self, check_hash):
            _mode = 'r'
            _n = 0
            with open(self.engine_extract_file, _mode) as database:
                for line in database:
                    _n = _n + 1
                    if len(line.strip()) != 0:
                        if not line.startswith('#'):
                            if str(check_hash) in str(line):
                                return True
            return False


    def scan_result_logss(self, _contents):
            _make_output_dir = '%s/output' % self.home_path
            _mode = 'w'

            if os.path.exists(_make_output_dir):
                if os.path.exists(self.scan_result_logs):
                    _mode = 'a'
            else:
                _mode = 'w'
                os.makedirs(_make_output_dir)

            with open(self.scan_result_logs, _mode) as fa:
                fa.write('%s' % _contents)
            fa.close()


    def make_hash(self, _f_file_name):
            _file_hash = ''
            if os.path.isfile(_f_file_name):
                f = open(_f_file_name, 'rb')
                filename_read = f.read()
                _file_hash = hashlib.sha256(filename_read).hexdigest()
                f.close()
            return _file_hash


    def check_file_extension(self, _file_name):
            #print(file_name)
            if _file_name.endswith(tuple(self.scan_extension_list)):
                return True
            else:
                return False


    def check_file_size(self, _f_file_name):
            # 10MB = '10485760'
            _limit = 10485760

            f = os.stat(_f_file_name).st_size
            if f <= _limit:
                return True
            else:
                return False


    def get_create_date(self, _f_file_name):
            if platform.system() == 'Windows':
                _result = os.path.getctime(_f_file_name)
            else:
                _result = os.path.getmtime(_f_file_name)
            return datetime.fromtimestamp(_result).strftime('%Y-%m-%d %H:%M:%S')


    def get_modify_date(self, _f_file_name):
            _result = os.path.getmtime(_f_file_name)
            return datetime.fromtimestamp(_result).strftime('%Y-%m-%d %H:%M:%S')


    def get_file_type(self, _file_name):
            return magic.from_buffer(open(_file_name, 'rb').read(2048))


    def get_hostname(self):
            return platform.node()


    def get_osver(self):
            if str(platform.system()) != 'Windows':
                _result = '%s' % platform.platform().split('-with-', 1)[1]
            else:
                _result = '%s' % platform.platform()
            return _result


    def get_ip_address(self):
            system_ip_list = getaddrinfo(gethostname(), None, 2, 1, 0)
            _ip_list = ''
            for ip in system_ip_list:
                _ip_address = ip[4][0]
                _ip_list += '%s ' % _ip_address
            return _ip_list.strip()


    def create_job_id(self):
            return uuid.uuid4()


    def extract_digital_signature(self, _file_name, _f_file_name):
            _result = ''

            pe = pefile.PE(_f_file_name)
            if hex(pe.DOS_HEADER.e_magic) == '0x5a4d':
                address = pe.OPTIONAL_HEADER.DATA_DIRECTORY[pefile.DIRECTORY_ENTRY["IMAGE_DIRECTORY_ENTRY_SECURITY"]].VirtualAddress
                size = pe.OPTIONAL_HEADER.DATA_DIRECTORY[pefile.DIRECTORY_ENTRY["IMAGE_DIRECTORY_ENTRY_SECURITY"]].Size

                if address == 0:
                    _result = '** No Digital-Signed File **'
                else:
                    with open(_f_file_name, 'rb') as fh:
                        fh.seek(address)
                        thesig = fh.read(size)
                    signature = cms.ContentInfo.load(thesig[8:])

                    i = 0
                    for cert in signature['content']['certificates']:
                        i = i + 1
                        _export_certificate = '%s/output/%s_%s.der' % (self.home_path, _file_name, i)
                        with open(_export_certificate, 'wb+') as f:
                            f.write(cert.dump())

                        x509_pem_cert = x509.load_der_x509_certificate(cert.dump(), default_backend())
                        _subject = x509_pem_cert.issuer.get_attributes_for_oid(NameOID.COMMON_NAME)[0].value
                        if 'root' not in _subject.lower():
                            _contents = '%s_%s_valid(%s-%s)|' % (x509_pem_cert.subject.get_attributes_for_oid(NameOID.COMMON_NAME)[0].value,
                                                                 x509_pem_cert.issuer.get_attributes_for_oid(NameOID.ORGANIZATION_NAME)[0].value,
                                                                 x509_pem_cert.not_valid_before, x509_pem_cert.not_valid_after)
                            _result += _contents
                    fh.close()
                    f.close()
            pe.close()
            return _result


    def check_engine(self):
            _name = 'MALWARE'
            _get_download = True

            if os.path.exists(self.engine_extract_file):
                create_time = os.stat(self.engine_extract_file).st_mtime

                _engine_file_date = datetime.fromtimestamp(create_time).strftime('%Y%m%d')
                self.todaynum = datetime.today().strftime('%Y%m%d')

                if int(_engine_file_date) == int(self.todaynum):
                    _get_download = True
                else:
                    _get_download = False
            else:
                print('- Updating %s Signatures' % _name)
                print('%s------------------------------------->%s' % (Bcolors.Yellow, Bcolors.Endc))
                self.download_engine()

            if not _get_download:
                print('- Updating %s Signatures' % _name)
                print('%s------------------------------------->%s' % (Bcolors.Yellow, Bcolors.Endc))
                self.download_engine()


    def scanner(self, _scan_path):
            _scanned_file_count = 0
            _infected_file_count = 0
            _scandir_file_count = sum(len(files) for _, _, files in os.walk(_scan_path))
            print('- Scan Directory  : %s' % _scan_path)
            print('- Number of files : %d' % _scandir_file_count)
            print('- Scan Extensions : %s' % str(self.scan_extension_list)[1:-1])
            print('- Currently scanning...')

            start = time.perf_counter()
            _detected = ''

            _ipaddress = self.get_ip_address()
            _hostname = self.get_hostname()
            _scan_id = self.create_job_id()
            _os_version = self.get_osver()

            for subdir, dirs, files in os.walk(_scan_path):
                for file in files:
                    #print(os.path.join(subdir, file))
                    _scanned_file_count = _scanned_file_count + 1
                    _f_file_name = '%s' % os.path.join(subdir, file)
                    elapsed_time = time.perf_counter() - start
                    #print(file)
                    if self.check_file_extension(file):
                        if self.check_file_size(_f_file_name):
                            scan_file_hash = self.make_hash(_f_file_name)
                            if self.hash_exists_in_db(scan_file_hash):
                                _infected_file_count = _infected_file_count + 1
                                _contents = 'datetime="%s",scan_id="%s",os="%s",hostname="%s",ip="%s",file_type="%s",file="%s",created_at="%s",modified_at="%s",hash="%s",code_sign="%s"\n' \
                                            % (datetime.today().strftime('%Y-%m-%d %H:%M:%S'), _scan_id, _os_version, _hostname, _ipaddress, self.get_file_type(_f_file_name),
                                               _f_file_name, self.get_create_date(_f_file_name), self.get_modify_date(_f_file_name), scan_file_hash, self.extract_digital_signature(file, _f_file_name))
                                _detected += _contents
                                self.scan_result_logss(_contents)

                            sys.stdout.write('\r- %d files scanned / %d infected [%s] (%s) '
                                             % (_scanned_file_count, _infected_file_count,
                                                datetime.strftime(datetime.utcfromtimestamp(elapsed_time), '%H:%M:%S'),
                                                _f_file_name))
                            sys.stdout.flush()

            if _infected_file_count >= 1:
                _vt_info = '\n##### For more information about infected file, search the Virustotal ###\n' \
                           'https://www.virustotal.com/gui/file/$infected_file_hash\n\n'
                self.scan_result_logss(_vt_info)

            print('\n')
            print('- Result')

            if _detected:
                print('- scanner Found %d infected files!' % ( _infected_file_count))
                print('- See the %s \n' % (self.scan_result_logs))
            else:
                print('%s- OK.Good. No infection found.%s' % (Bcolors.Green, Bcolors.Endc))


    def main(self, options):
                print('Malware scanner\n')

                if os.path.isdir(options):
                    _scan_path = os.path.abspath(options)
                    self.check_engine()
                    # engine_date = engine_last_dated(self.engine_extract_file)
                    print('- Engine Updated  : %s' % self.get_engine_last_udated_date(self.engine_extract_file))
                    engine_count = self.raw_count(self.engine_extract_file)
                    print('- AV Signatures   : %s' % engine_count)
                    self.scanner(_scan_path)

                elif options=="update":
                    print('- Run time: %s' % self.ctime)
                    self.check_engine()
                    # engine_date = engine_last_dated(self.engine_extract_file)
                    print('- Engine Updated  : %s' % self.get_engine_last_udated_date(self.engine_extract_file))
                    engine_count = self.raw_count(self.engine_extract_file)
                    print('- AV Signatures   : %s' % engine_count)
                else:
                    pass

#if __name__ == '__main__':
 #   try:
  #      main(r"F:\KontolodonWeb\templates\another".replace("\\", "/"))
   # except KeyboardInterrupt:
    #    sys.exit(0)
    #except Exception as e:
     #   print('%s- ::Exception:: Func:[%s] Line:[%s] [%s] %s%s' % (Bcolors.Yellow, __name__.__name__, sys.exc_info()[-1].tb_lineno, type(e).__name__, e, Bcolors.Endc))
